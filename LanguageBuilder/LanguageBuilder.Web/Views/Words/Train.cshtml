@{
    ViewBag.Title = "Train";
    ViewBag.RegisterKnockout = true;

    User loggedUser = (User)ViewBag.LoggedUser;
}

@section Styles{

    <style>
        .card-btn {
            background-color: #008CBA;
            border: 3px solid #000;
            color: white;
            padding: 2em 2em;
            text-align: center;
            text-decoration: none;
            display: block;
            font-size: 3em;
            width: 450px;
            height: 450px;
            -ms-word-wrap: hyphenate;
            word-wrap: hyphenate;
            cursor: pointer;
        }

        .control {
            font-size: 2em;
        }
    </style>
}

<div id="train-cards" class="d-flex h-100">

    <div class="row justify-content-center align-self-center align-items-center">

        <div class="col-12 mb-5">
            <h1 class="display-4 text-center d-block">@ViewBag.Title</h1>
        </div>

        <div class="col-8 align-self-center">

            <img src="~/images/loading.gif" data-bind="visible: isLoading()" />

            <div data-bind="visible: hasError() && !isLoading()">
                Sorry, it seems that an error has occured.
            </div>

            <div data-bind="visible: !hasError() && !isLoading()">

                <div class="card-btn" data-bind="text: frontWord, click: toogle"></div>
            </div>
        </div>

        <div class="col-4 align-self-center">
            <div><span class="control" data-bind="text: position"></span></div>

            <button class="btn btn-info control" data-bind="click: loadPrevious">
                <i class="fa fa-arrow-left" aria-hidden="true"></i>
            </button>

            <button class="btn btn-info control" data-bind="click: loadNext">
                <i class="fa fa-arrow-right" aria-hidden="true"></i>
            </button>
        </div>
    </div>
</div>

@section Scripts {

    <script type="text/javascript">

    $(document).ready(function () {

        function TrainViewModel() {
            var self = this;

            this.isLoading = ko.observable(true);
            this.hasError = ko.observable(false);
            this.trainEnded = ko.observable(false);
            this.words = ko.observableArray();
            this.frontWord = ko.observable();
            this.backWord = ko.observable();
            this.currentIndex = ko.observable(-1);

            this.position = ko.computed(function () {
                return '' + (self.currentIndex() + 1) + ' / ' + self.words().length;
            });

            this.loadEntry = function (index) {
                var word = self.words()[index];

                if (word) {
                    self.frontWord(word.targetWord);
                    self.backWord(word.sourceWord);
                    self.currentIndex(index);
                } else {
                    self.trainEnded(true);
                };
            };

            this.loadNext = function () {
                var index = self.currentIndex() + 1;

                self.loadEntry(index);
            };

            this.loadPrevious = function () {
                var index = self.currentIndex() - 1;

                self.loadEntry(index);
            };

            this.toogle = function () {
                var front = self.frontWord();
                var back = self.backWord();

                self.frontWord(back);
                self.backWord(front);
            };

            this.init = function () {
                self.loadData(self.loadNext);
            };

            this.loadData = function (callback) {

                $.getJSON({
                    url: '/api/translations',
                    data: { userId: '@loggedUser.Id', languageId: '2' },
                    success: function (response, status, xhr) {

                        self.words(response);
                        self.isLoading(false);

                        if (callback !== undefined) { callback(response); }
                    },
                    error: function () {
                        self.isLoading(false);
                        self.hasError(true);
                    }
                });
            };

            this.postData = function (word, userId, callback) {

                // debug
                self.words.remove(word);

                @*$.getJSON({
                    url: '@Url.Action("", "")',
                    data: { word: word, userId: userId },
                    success: function (response, status, xhr) {
                        self.words.remove(word);
                        if (callback !== undefined) { callback(response, request); }
                    },
                    error: function () {
                        self.hasError(true);
                    }
                });*@
            };
        };

        trainModel = new TrainViewModel();

        trainModel.init();

        ko.applyBindings(trainModel, $('#train-cards').get(0));

    });
    </script>
}
